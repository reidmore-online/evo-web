static export const validPriorities = ["primary", "secondary", "tertiary"];
static export const validSizes = ["large", "small"] as const;

export interface Input extends Marko.HTML.Button, Omit<Marko.HTML.A, "type" |`on${string}`> {
    href?: string;
    size?: (typeof validSizes)[number];
    priority?: "primary" | "secondary" | "tertiary" | "none";
    variant?: "standard" | "destructive" | "form";
    bodyState?: "loading" | "expand" | "reset" | "none";
    fluid?: boolean;
    borderless?: boolean;
    disabled?: boolean;
    partiallyDisabled?: boolean;
    transparent?: boolean;
    fixedHeight?: boolean;
    truncate?: boolean;
    split?: string;
    a11yLoadingText?: Marko.HTMLAttributes["aria-label"];
    onEscape?: (event: KeyboardEvent) => void;
}

<const/{
    content,
    a11yLoadingText,
    bodyState,
    borderless,
    // class: inputClass,
    fixedHeight,
    fluid,
    href,
    partiallyDisabled: partiallyDisabled,
    priority: inputPriority = "secondary",
    size: inputSize,
    split = "none",
    transparent,
    truncate,
    type = "button",
    variant = "standard",
    ...htmlInput
}=input/>

<const/priority=(borderless || variant === "form") ? "none" : inputPriority>
<const/size=(inputSize && validSizes.includes(inputSize) ? inputSize : null)>

<const/baseClass=(href ? "fake-btn" : "btn")/>
<const/sizeClass=(size && baseClass + "--" + size)/>
<const/truncateClass=(
    truncate &&
    (sizeClass ? sizeClass + "-truncated" : baseClass + "--truncated")
)>
<const/transparentClass=transparent && (baseClass + "--transparent")>
<const/fixedHeightClass=(
    fixedHeight &&
    (sizeClass ? sizeClass + "-fixed-height" : baseClass + "--fixed-height")
)>
<const/variantClass=variant !== "standard" && `${baseClass}--${variant}`>

<const/tag=href ? "a" : "button">
<${tag}
    ...htmlInput
    onKeyDown(e: KeyboardEvent) {
        if (e.key === "Escape" && !input.disabled) {
            input.onEscape?.(e);
        }
    }
    class=[
        // inputClass,
        baseClass,
        fluid && `${baseClass}--fluid`,
        truncateClass,
        fixedHeightClass,
        transparentClass,
        variantClass,
        !truncateClass && !fixedHeightClass && sizeClass,
        split !== "none" && `${baseClass}--split-${split}`,
        borderless && `${baseClass}--borderless`,
        validPriorities.includes(priority) && `${baseClass}--${priority}`,
    ]
    type=type ?? (tag === "button" && "button")
    aria-disabled=partiallyDisabled && "true"
    aria-label=(bodyState === "loading" ? a11yLoadingText : input["aria-label"])
>
    <if=(bodyState === "loading")>
        <span class="btn__cell">
            <evo-progress-spinner a11yText=""/>
        </span>
    </if>
    <else if=(bodyState === "expand")>
        <span class="btn__cell">
            <span class="btn__text">
                <${content}/>
            </span>
            <evo-icon-chevron-down-16/>
        </span>
    </else>
    <else>
        <${content}/>
    </else>
</>
