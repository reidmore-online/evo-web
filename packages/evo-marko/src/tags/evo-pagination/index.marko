import DotsIcon from "<evo-icon-overflow-horizontal-24>";
import { getMaxWidth } from "../../common/dom";
export interface Item extends Omit<Marko.HTML.Button, "type"> {
    type?: "previous" | "next" | "page";
    current?: boolean;
    href?: string;
    variant?: "link" | "button";
}
export interface Input extends Marko.HTML.Nav {
    item?: Marko.AttrTag<Item>;
    prev?: Marko.AttrTag<Item>;
    next?: Marko.AttrTag<Item>;
    variant?: "show-range" | "show-last" | "overflow";
    a11yCurrentText?: Marko.HTMLAttributes["aria-label"];
}
static const MAX_PAGES = 9;
static const MIN_PAGES = 5;

<const/{
    class: inputClass,
    variant,
    item: items = [],
    prev,
    next,
    a11yCurrentText = "Results Pagination - Page 1",
    ...htmlInput
}=input>
<let/itemWidth=0>
<let/maxItems=MIN_PAGES>

<const/calculateMaxItems() {
    if (!baseItems.some((item) => !item.type)) {
        return;
    }

    if (!itemWidth) {
        // calculate the width of the first visible item
        const listItem = itemsEl().querySelectorAll("li");
        for (let i = 0; i < listItem.length; i++) {
            const item = listItem[i] as HTMLElement;
            if (item.offsetWidth) {
                itemWidth = item.offsetWidth;
                break;
            }
        }
    }
    // subtract 2 from the rounded results to take into account previous/next page buttons
    maxItems = Math.max(
        MIN_PAGES,
        Math.min(MAX_PAGES, Math.floor(getMaxWidth(root()) / itemWidth) - 2),
    );
}>

<const/hasDots=variant === "show-last" || variant === "overflow">
<const/hasOverflow=variant === "overflow">
<const/baseItems=[...items]>
<const/lastItemIndex=baseItems.length - 1>
<const/dotsIndex=(hasDots ? lastItemIndex : -1)>
<const/leadingDotsIndex=(hasOverflow ? 1 : -1)>

<const/{ start, end, hideDots, hideLeadingDots }=(() => {
    let hideDots = false;
    let hideLeadingDots = false;

    const i = baseItems.findIndex((item) => item.current);
    const range = Math.floor(maxItems / 2);
    let start = i - range;
    let end = i + range;

    if (start <= 0) {
        end = maxItems - 1;
        start = 0;
    } else if (end >= lastItemIndex) {
        end = lastItemIndex;
        start = lastItemIndex - (maxItems - 1);
    } else if (maxItems % 2 === 0) {
        start++;
    }

    if (hasDots) {
        if (i + range >= lastItemIndex || end >= lastItemIndex) {
            hideDots = true;
        } else if (i <= end - 2) {
            end -= 2;
        } else {
            start += 1;
            end -= 1;
        }
    }

    if (hasOverflow) {
        if (i - range <= 0) {
            hideLeadingDots = true;
        } else if (i >= start - 1) {
            start += 2;
        } else {
            end -= 1;
            start -= 1;
        }
    }

    return {
        start,
        end,
        hideDots,
        hideLeadingDots,
    };
})()>

<const/isItemHidden(index: number) {
    return (
        (index < start || index > end) &&
        dotsIndex !== index &&
        leadingDotsIndex - 1 !== index
    );
}>

<const/getItemTag(item: Item = {}) {
    if (item.variant) {
        return item.variant === "link" ? "a" : "button";
    }
    return !!item.href ? "a" : "button";
}>

<script>
    calculateMaxItems();
    window.addEventListener("resize", calculateMaxItems, {
        signal: $signal,
    });
</script>

<nav/root
    ...htmlInput
    role="navigation"
    class=["pagination", inputClass]
    aria-labelledby:scoped="heading">
    <span aria-live="polite" role="status">
        <h2 id:scoped="heading" class="clipped">
            ${a11yCurrentText}
        </h2>
    </span>

    <${getItemTag(prev)}
        ...prev
        class=[
            "pagination__previous",
            prev?.href ? "icon-link" : "icon-btn",
            prev?.class,
        ]
        aria-label=prev?.["aria-label"] || "Previous Page"
        aria-disabled=prev ? prev.disabled && "true" : "true"
        style=[prev?.style, { minWidth: 40 }]>
        <evo-icon-arrow-left-16/>
    </>

    <ol/itemsEl class="pagination__items">
        <for|item, i| of=items>
            <if=item.type !== "previous" && item.type !== "next">
                <if=dotsIndex === i || leadingDotsIndex === i>
                    <const/isLeading=leadingDotsIndex === i>
                    // Keep this for reference until we verify the logic on hidden is correct
                    // $ var isLeading = false;
                    // $ if (leadingDotsIndex === i) {
                    //     isLeading = true;
                    //     hideDots = !!hideLeadingDots;
                    // }
                    <li hidden=hideDots || leadingDotsIndex === i>
                        <if=hasOverflow>
                            <span
                                class=["pagination__item", item.class]
                                role="separator">
                                // TODO add after fake-menu-button is added
                                // <evo-fake-menu-button
                                //     variant="icon"
                                //     transparent
                                //     icon=DotsIcon
                                //     collapseOnSelect
                                //     on-select("handleMenuPageNumber")>
                                //     <for|item, j| of=slicedItems>
                                //         <const/visible = (isLeading ? j < start : j > end)>
                                //         <if=isItemHidden(j) && visible>
                                //             <@item
                                //                 type=(
                                //                     getItemTag(
                                //                         item,
                                //                     ) as Marko.HTML.Button["type"]
                                //                 )
                                //                 data-page-number=j
                                //                 ...item/>
                                //         </if>
                                //     </for>
                                // </evo-fake-menu-button>
                            </span>
                        </if>
                        <else>
                            <span
                                class=["pagination__item", item.class]
                                role="separator">
                                <evo-icon-overflow-horizontal-24/>
                            </span>
                        </else>
                    </li>
                </if>
                <li hidden=isItemHidden(i)>
                    <${getItemTag(item)}
                        ...item
                        class=["pagination__item", item.class]
                        aria-current=item.current && "page"/>
                </li>
            </if>
        </for>
    </ol>

    <${getItemTag(next)}
        ...next
        class=[
            "pagination__next",
            next?.href ? "icon-link" : "icon-btn",
            next?.class,
        ]
        aria-label=next?.["aria-label"] || "Next Page"
        aria-disabled=next ? next.disabled && "true" : "true"
        style=[next?.style, { minWidth: 40 }]>
        <evo-icon-arrow-right-16/>
    </>
</nav>
