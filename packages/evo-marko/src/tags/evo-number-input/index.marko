import type {
    Input as TextboxInput,
} from "../evo-textbox/index.marko";

export interface Input extends Omit<TextboxInput, "value" | "valueChange"> {
    value?: number;
    valueChange?: (value?:number) => void;
    min?: number;
    max?: number;
    label?: Marko.AttrTag<{ content: Marko.Body }>;
    a11yDeleteText?: Marko.HTMLAttributes["aria-label"];
    onIncrement?: (event: Event, target: HTMLElement, value:number) => void;
    onDecrement?: (event: Event, target:HTMLElement, value:number) => void;
    onDelete?: (event: Event, target:HTMLElement) => void;
}

<const/defaultMin = input.a11yDeleteText ? 1 : 0>

<const/{
    label,
    a11yDeleteText,
    class: inputClass,
    min = defaultMin,
    max = Infinity,
    onIncrement,
    id,
    onDecrement,
    onDelete,
    ...htmlInput
} = input>

<id/numberInput=id>
<let/value:=input.value>

<const/displayValue = value || defaultMin/>

<const/checkBoundary(value: number, inc: number = 0) {
    let newValue = value + inc;
    if (isNaN(newValue)) {
        newValue = defaultMin;
    } else if (newValue > max) {
        newValue = max;
    } else if (newValue < min) {
        newValue = min;
    }
    return newValue;
}/>

<span class=[
    "number-input",
    a11yDeleteText && value === 1 && "number-input--show-delete",
    inputClass,
]>
    <evo-textbox
        ...htmlInput
        min=min
        max=max
        id=numberInput
        type="number"
        key="input"
        value=displayValue
        valueChange(newValue) {
            value = checkBoundary(parseInt(newValue, 10)|| defaultMin, 0) ;
        }
    >
        <@prefixIcon>
            <if=label>
                <label for=numberInput>
                    <${label}/>
                </label>
            </if>
            <evo-icon-button
                aria-hidden="true"
                disabled=(displayValue <= min)
                size="small"
                class="number-input__decrement"
                transparent
                tabindex="-1"
                onClick(event, target) {
                    value = checkBoundary(displayValue, -1);
                    (onDecrement || null)?.(event, target, value!);
                }
            >
                <evo-icon-remove-24/>
            </evo-icon-button>
        </@prefixIcon>
        <@postfixIcon>
            <if=a11yDeleteText>
                <evo-icon-button
                    class="number-input__delete"
                    size="small"
                    transparent
                    aria-label=a11yDeleteText
                    on-click(event, target) {
                        (onDelete || null)?.(event, target);
                    }
                >
                    <evo-icon-delete-24/>
                </evo-icon-button>
            </if>

            <evo-icon-button
                aria-hidden="true"
                disabled=(displayValue >= max)
                class="number-input__increment"
                size="small"
                transparent
                onClick(event, target) {
                    value = checkBoundary(displayValue, 1);
                    (onIncrement || null)?.(event, target, value!);
                }
                tabindex="-1"
            >
                <evo-icon-add-24/>
            </evo-icon-button>
        </@postfixIcon>
    </evo-textbox>
</span>
