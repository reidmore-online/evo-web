export interface Input extends Marko.HTML.Div {
  /**
   *  This is the accessibility label for the eek rating. This is also used for internationalization.
   *  It should use eekRating, min, and max values in the label in order to demonstrate
   *  to screen readers the content on the component.
   *
   *  Expected english value `Energy Rating: ${eekRating}. Range: ${max} - ${min}.`
   **/
  a11yText: Marko.HTML.Div["aria-label"];
  max: string;
  min: string;
  rating: string;
  size?: "regular" | "large";
}
static const validRanges = {
  "A+++": ["D", "E", "G"],
  "A++": ["E", "G"],
  "A+": ["F", "G"],
  A: ["G"],
};
static function eekUtil(max:string, min:string, rating:string) {
  const validMax = validRanges[max as keyof typeof validRanges];
  if (!(validMax && validMax.indexOf(min) > -1)) {
    return null;
  }
  // Count from max until you reach rating
  let current = max;
  let i = 1;
  while (current !== rating) {
    i++;
    if (min === current) {
      // It's at end, didn't match rating
      return null;
    } else if (current.length > 1) {
      // Has + in string, remove one plus
      current = current.slice(0, current.length - 1);
    } else {
      // No pluses get next character code
      current = String.fromCharCode(current.charCodeAt(0) + 1);
    }
  }
  return i > 7 ? 7 : i;
}

<const/{
  class: inputClass,
  a11yText,
  size,
  max,
  min,
  rating,
  ...htmlInput
}=input/>

<const/eekRating=eekUtil(max, min, rating)/>
<div
  ...htmlInput
  aria-label=a11yText
  role="figure"
  class=[
    "eek",
    eekRating ? `eek--rating-${eekRating}` : null,
    size === "large" && "eek--large",
    inputClass,
  ]
>
  <div class="eek__container" aria-hidden="true">
    <span class="eek__rating-range">
      <span aria-hidden="true">
        ${max}
      </span>
      <evo-icon-eek-range-arrow/>
      <span aria-hidden="true">
        ${min}
      </span>
    </span>
    <span class="eek__rating" aria-hidden="true">
      ${rating}
    </span>
  </div>
  <evo-icon-eek-arrow/>
</div>
