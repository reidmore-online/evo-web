import {
    autoUpdate,
    computePosition,
    shift,
    offset,
    type ReferenceElement,
} from "@floating-ui/dom";
static interface Ret {
    floatingStyles: undefined | Marko.HTMLAttributes["style"];
    onClick: () => void;
    onFocus: () => void;
    onFocusOut: () => void;
    onKeydown: (e: KeyboardEvent) => void;
    ariaExpanded: Marko.HTMLAttributes["aria-expanded"];
}
export interface Input {
    open?: boolean;
    reverse?: boolean;
    collapseOnSelect?: boolean;
    strategy?: "absolute" | "fixed";
    offset?: number;
    openChange?: (open: boolean) => void;
    host: () => HTMLElement;
    overlay: () => HTMLElement;
}

<let/floatingStyles=undefined as Ret["floatingStyles"]>
<const/update=() => {
    computePosition(input.host(), input.overlay(), {
        placement: input.reverse ? "bottom-end" : "bottom-start",
        strategy: input.strategy ?? "fixed",
        middleware: [offset(input.offset ?? 4), shift()],
    }).then(({ x, y }) => {
        if ($signal.aborted) {
            return;
        }
        floatingStyles = {
            left: `${x}px`,
            top: `${y}px`,
        };
    });
}>

<let/open:=input.open>

<script>
    if (open) {
        const cleanupFn = autoUpdate(input.host(), input.overlay(), update);
        $signal.onabort = () => {
            cleanupFn();
        };
        let focusItem = input
            .overlay()
            ?.querySelector("[tabindex]") as HTMLInputElement;
        if (!focusItem) {
            focusItem = input.overlay() as HTMLInputElement;
        }
        focusItem?.focus();

        // Set timeout is here because otherwise the events will bubble and trigger immediately
        setTimeout(() => {
            document.addEventListener(
                "click",
                (e: Event) => {
                    if (
                        input.host().contains(e.target as Node) === false ||
                        input.collapseOnSelect
                    ) {
                        open = false;
                    }
                },
                {
                    signal: $signal,
                },
            );
            document.addEventListener(
                "keydown",
                (e) => {
                    if (e.key === "Escape") {
                        open = false;
                    }
                },
                {
                    signal: $signal,
                },
            );
        }, 0);
    }
</script>

<return=(
    {
        floatingStyles,
        onClick() {
            open = !open;
       },
        onFocus() {
            open = true;
        },
        onFocusOut() {
            open = false;
        },
        onKeydown(e) {
            if (e.key === "Enter" || e.key === " ") {
                open = true;
            }
        },
        ariaExpanded: open ? "true" : "false",
    } as Ret
)>
