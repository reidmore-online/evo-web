import { processHtmlAttributes } from "../../common/html-attributes";
$ const {
    class: inputClass,
    style,
    classPrefix,
    type,
    reverse,
    fixed,
    fixWidth,
    item: items = [],
    variant,
    ariaLabel,
    ariaLabelledby,
    ...htmlInput
} = input;
$ var isFilter = variant === "filter";
$ var isRadio = type === "radio";
$ var isCheckbox = type === "checkbox" || (isFilter && type !== "radio");
$ var isCheckable = isRadio || isCheckbox;
$ var baseClass = classPrefix || "menu";
$ var separatorMap = component.getSeparatorMap(input);
<span
    ...processHtmlAttributes(htmlInput)
    class=[
        classPrefix ? `${baseClass}__menu` : "menu",
        reverse && `${baseClass}__menu--reverse`,
        fixed && `${baseClass}__menu--fixed`,
        fixWidth && `${baseClass}__menu--fix-width`,
        isFilter && `${baseClass}--filter`,
        inputClass,
    ]
    style=style>
    <div
        role="menu"
        class=`${baseClass}__items`
        key="menu"
        aria-label=ariaLabel
        aria-labelledby=ariaLabelledby
        id:scoped="menu">
        <for|item, index| of=component.items>
            $ const {
                class: itemClass,
                style,
                value,
                checked: itemChecked,
                badgeNumber,
                disabled,
                renderBody,
                ...htmlItem
            } = item;
            $ var itemRole: Marko.HTML.Div["role"] = (
                isRadio
                    ? "menuitemradio"
                    : isCheckbox
                      ? "menuitemcheckbox"
                      : "menuitem"
            );
            $ var checked = component.isChecked(index);
            <if(separatorMap[index])>
                <hr class=`${baseClass}__separator` role="separator">
            </if>
            <div
                ...processHtmlAttributes(htmlItem)
                class=[
                    `${baseClass}__item`,
                    itemClass,
                    badgeNumber !== undefined && `${baseClass}__item--badged`,
                ]
                style=style
                aria-checked=isCheckable && (checked ? "true" : "false")
                aria-disabled=disabled && "true"
                role=itemRole
                onClick(!disabled && "handleItemClick", index)
                onKeydown(!disabled && "handleItemKeydown", index)
                onKeypress(!disabled && "handleItemKeypress")
                key="item[]">
                <if(isFilter)>
                    <if(isRadio)>
                        <ebay-radio-unchecked-18-icon class="icon--unchecked"/>
                        <ebay-radio-checked-18-icon class="icon--checked"/>
                    </if>
                    <else>
                        <ebay-checkbox-unchecked-18-icon class="icon--unchecked"/>
                        <ebay-checkbox-checked-18-icon class="icon--checked"/>
                    </else>
                </if>
                <span>
                    <${renderBody}/>
                    <if(badgeNumber)>
                        <ebay-badge type="menu" number=badgeNumber/>
                    </if>
                </span>
                <if(!isFilter)>
                    <ebay-tick-16-icon/>
                </if>
            </div>
        </for>
    </div>
</span>
