const { default: dedent } = require("dedent");
const { readFileSync, writeFile, writeFileSync } = require("fs");
const { parseSync, stringify } = require("svgson");
const { resolve } = require("path");
const { deleteSync } = require("del");

const fileHeader = `/* This file is autogenerated, do not edit - it will be overwritten anyway */`;

// functions

function parseSVG(skinIconsFile, { camelcase = true } = {}) {
    const icons = readFileSync(skinIconsFile).toString();
    return ((icons && parseSync(icons, { camelcase })) || {}).children || [];
}

function parseSVGSymbols(skinIconsFile) {
    const icons = parseSVG(skinIconsFile);
    return icons.filter(({ name }) => name === "symbol");
}

function getIconKeys(icons = []) {
    const symbolIds = icons.map((symbol) => symbol.attributes.id);

    return {
        iconKeys: symbolIds.map((symbolId) => camelCased(symbolId.replace(/^(icon|flag)-/, ""))).sort(),
    };
}

function saveIconType(keys, typesFile) {
    const typesText = dedent`${fileHeader}\n
export type Icon =
    ${keys.map((key) => `'${key}'`).join(" |\n    ")}
`;

    writeFile(typesFile, typesText, (err) => {
        if (err) console.error(err);
        else console.log(`${keys.length} enums written to ${typesFile}.`);
    });
}

function saveIconConstants(keys, constFile) {
    const constText = dedent`${fileHeader}\n
import { Icon } from '../types'

export const icons: Icon[] = [
    ${keys.map((key) => `'${key}'`).join(",\n    ")}
]
`;

    writeFile(constFile, constText, (err) => {
        if (err) console.error(err);
        else console.log(`${keys.length} enums written to ${constFile}.`);
    });
}

function saveSvgIcons(collection, ebaySvgFile) {
    const svgText = generateEbaySVG(collection);
    writeFile(ebaySvgFile, svgText, (err) => {
        if (err) console.error(err);
        else console.log(`${collection.length} SVG symbols written to ${ebaySvgFile}.`);
    });
}

function saveIconComponents(svgFile) {
    const svgSymbols = parseSVG(svgFile, {
        camelcase: false,
    });
    const symbolsData = svgSymbols
        .filter(({ name }) => name === "symbol")
        .map((symbol) => ({
            id: symbol.attributes.id.replace(/^(icon)-/, ""),
            content: stringify(symbol),
            type: symbol.attributes.id.startsWith("icon") ? "icon" : "none",
        }));

    deleteSync(["./src/ebay-icon/icons/*"]);

    writeFileSync(
        resolve(__dirname, "../src/ebay-icon/icons/types.ts"),
        dedent`
            import type { FC, ComponentProps } from 'react';
            import type EbayIcon from '../icon';

            export type EbayIconComponentProps = Omit<ComponentProps<typeof EbayIcon>, 'name' | '__type' | '__symbol'>;
            export type EbayIconComponent = FC<EbayIconComponentProps>;
        `,
    );

    symbolsData.forEach((data) => {
        const iconNameCamelCase = camelCased(data.id);
        const filename = resolve(__dirname, `../src/ebay-icon/icons/ebay-icon-${data.id}.tsx`);
        writeFile(
            filename,
            dedent`
            ${fileHeader}\n
            import React from "react";
            import EbayIcon from "../icon";
            import type { EbayIconComponent } from "./types";

            const SYMBOL = \`${data.content}\`;

            export const EbayIcon${iconNameCamelCase[0].toUpperCase()}${iconNameCamelCase.slice(1)}: EbayIconComponent = props => (
                <EbayIcon {...props} name="${iconNameCamelCase}" __type="${data.type}" __symbol={SYMBOL} />
            );
        `,
            (err) => {
                if (err) console.error(err);
                else console.log(`Created icon: ${filename}`);
            },
        );
    });
}

function generateEbaySVG(svgSymbols) {
    const symbolStrings = svgSymbols.map((symbol) =>
        stringify(symbol, {
            transformAttr: transformSVGtoReact,
        }),
    );

    return dedent`/* eslint-disable */
// @ts-nocheck
${fileHeader}\n
import React from 'react'

export const symbols = [
    ${symbolStrings.map(addKeyToSymbol).join(",\n    ")}
]
`;
}

function addKeyToSymbol(symbol, key) {
    return symbol.replace(/(<\w+)/, `$1 key={${key}}`);
}

function transformSVGtoReact(key, value, escape) {
    const updatedKeys = {
        class: "className",
        viewbox: "viewBox",
    };

    const updatedValue = key === "style" ? `{{${styleToReact(value)}}}` : `"${escape(value)}"`;

    return `${updatedKeys[key] || key}=${updatedValue}`;
}

function styleToReact(styleStr) {
    return styleStr
        .split(";")
        .filter(Boolean)
        .map((style) => {
            [key, value] = style.split(":");
            return `${camelCased(key.trim())}: '${value.trim()}'`;
        })
        .join(", ");
}

function camelCased(str) {
    return str.replace(/-([^-])/g, (s, c) => c.toUpperCase());
}

module.exports = {
    getIconKeys,
    parseSVG,
    parseSVGSymbols,
    saveIconType,
    saveIconConstants,
    saveSvgIcons,
    generateEbaySVG,
    saveIconComponents,
};
